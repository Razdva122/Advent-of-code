function codeSolve(inputNumbers, input) {
  let relativeCounter = 0;
  const output = [];
  for (let i = 0; i < input.length; i += 1) {

    const command = String(input[i]).split('');
    const code = Number(command.slice(command.length - 2).join(''));
    const nums = [0, 0, 0];
    const firstNumMode = Number(command.slice(command.length - 3, command.length - 2).join('') || '0');
    const secondNumMode = Number(command.slice(command.length - 4, command.length - 3).join('') || '0');
    const thirdNumMode = Number(command.slice(command.length - 5, command.length - 4).join('') || '0');

    switch(firstNumMode) {
      case 0:
        nums[0] = input[input[i + 1]] || 0; 
        break;
      case 1:
        nums[0] = input[i + 1] || 0;
        break;
      case 2:
        nums[0] = input[input[i + 1] + relativeCounter] || 0;
        break;
    }

    switch(secondNumMode) {
      case 0:
        nums[1] = input[input[i + 2]] || 0;
        break;
      case 1:
        nums[1] = input[i + 2] || 0;
        break;
      case 2:
        nums[1] = input[input[i + 2] + relativeCounter] || 0;
        break;
    }

    switch(thirdNumMode) {
      case 0:
        nums[2] = input[i + 3] || 0;
        break;
      case 1:
        nums[2] = i + 3;
        break;
      case 2:
        nums[2] = input[i + 3] + relativeCounter;
        break;
    }

    if (code === 1) {
      input[nums[2]] = nums[0] + nums[1];
      i += 3;
    } else if (code === 2) {
      input[nums[2]] = nums[0] * nums[1];
      i += 3;
    } else if (code === 3) {
      if (firstNumMode === 0) {
        input[input[i + 1]] = inputNumbers.shift();
      } else {
        input[input[i + 1] + relativeCounter] = inputNumbers.shift();
      }
      i += 1;
    } else if (code === 4) {
      output.push(nums[0]);
      i += 1;
    } else if (code === 5) {
      if (nums[0] !== 0) {
        i = nums[1] - 1;
      } else {
        i += 2;
      }
    } else if (code === 6) {
      if (nums[0] === 0) {
        i = nums[1] - 1;
      } else {
        i += 2;
      }
    } else if (code === 7) {
      if (nums[0] < nums[1]) {
        input[nums[2]] = 1;
      } else {
        input[nums[2]] = 0;
      }
      i += 3;
    } else if (code === 8) {
      if (nums[0] === nums[1]) {
        input[nums[2]] = 1;
      } else {
        input[nums[2]] = 0;
      }
      i += 3;
    } else if (code === 9) {
      relativeCounter += nums[0];
      i += 1;
    } else if (code === 99) {
      return output;
    }
  }
}


const robotPosition = {
  x: null,
  y: null,
  direction: null,
};
const data = codeSolve(createInput(false), [2,330,331,332,109,3274,1102,1182,1,15,1101,1489,0,24,1001,0,0,570,1006,570,36,101,0,571,0,1001,570,-1,570,1001,24,1,24,1106,0,18,1008,571,0,571,1001,15,1,15,1008,15,1489,570,1006,570,14,21102,58,1,0,1106,0,786,1006,332,62,99,21101,333,0,1,21101,73,0,0,1106,0,579,1101,0,0,572,1102,0,1,573,3,574,101,1,573,573,1007,574,65,570,1005,570,151,107,67,574,570,1005,570,151,1001,574,-64,574,1002,574,-1,574,1001,572,1,572,1007,572,11,570,1006,570,165,101,1182,572,127,1002,574,1,0,3,574,101,1,573,573,1008,574,10,570,1005,570,189,1008,574,44,570,1006,570,158,1106,0,81,21101,0,340,1,1106,0,177,21101,0,477,1,1106,0,177,21102,1,514,1,21101,176,0,0,1105,1,579,99,21101,0,184,0,1105,1,579,4,574,104,10,99,1007,573,22,570,1006,570,165,1002,572,1,1182,21101,0,375,1,21102,1,211,0,1106,0,579,21101,1182,11,1,21101,0,222,0,1105,1,979,21101,0,388,1,21102,1,233,0,1105,1,579,21101,1182,22,1,21101,0,244,0,1106,0,979,21102,1,401,1,21102,255,1,0,1105,1,579,21101,1182,33,1,21102,266,1,0,1105,1,979,21102,1,414,1,21102,277,1,0,1105,1,579,3,575,1008,575,89,570,1008,575,121,575,1,575,570,575,3,574,1008,574,10,570,1006,570,291,104,10,21102,1182,1,1,21102,1,313,0,1105,1,622,1005,575,327,1101,0,1,575,21102,1,327,0,1105,1,786,4,438,99,0,1,1,6,77,97,105,110,58,10,33,10,69,120,112,101,99,116,101,100,32,102,117,110,99,116,105,111,110,32,110,97,109,101,32,98,117,116,32,103,111,116,58,32,0,12,70,117,110,99,116,105,111,110,32,65,58,10,12,70,117,110,99,116,105,111,110,32,66,58,10,12,70,117,110,99,116,105,111,110,32,67,58,10,23,67,111,110,116,105,110,117,111,117,115,32,118,105,100,101,111,32,102,101,101,100,63,10,0,37,10,69,120,112,101,99,116,101,100,32,82,44,32,76,44,32,111,114,32,100,105,115,116,97,110,99,101,32,98,117,116,32,103,111,116,58,32,36,10,69,120,112,101,99,116,101,100,32,99,111,109,109,97,32,111,114,32,110,101,119,108,105,110,101,32,98,117,116,32,103,111,116,58,32,43,10,68,101,102,105,110,105,116,105,111,110,115,32,109,97,121,32,98,101,32,97,116,32,109,111,115,116,32,50,48,32,99,104,97,114,97,99,116,101,114,115,33,10,94,62,118,60,0,1,0,-1,-1,0,1,0,0,0,0,0,0,1,26,0,0,109,4,2101,0,-3,586,21002,0,1,-1,22101,1,-3,-3,21101,0,0,-2,2208,-2,-1,570,1005,570,617,2201,-3,-2,609,4,0,21201,-2,1,-2,1105,1,597,109,-4,2105,1,0,109,5,2102,1,-4,629,21001,0,0,-2,22101,1,-4,-4,21101,0,0,-3,2208,-3,-2,570,1005,570,781,2201,-4,-3,652,21002,0,1,-1,1208,-1,-4,570,1005,570,709,1208,-1,-5,570,1005,570,734,1207,-1,0,570,1005,570,759,1206,-1,774,1001,578,562,684,1,0,576,576,1001,578,566,692,1,0,577,577,21102,702,1,0,1105,1,786,21201,-1,-1,-1,1105,1,676,1001,578,1,578,1008,578,4,570,1006,570,724,1001,578,-4,578,21102,1,731,0,1106,0,786,1106,0,774,1001,578,-1,578,1008,578,-1,570,1006,570,749,1001,578,4,578,21101,756,0,0,1106,0,786,1105,1,774,21202,-1,-11,1,22101,1182,1,1,21102,1,774,0,1106,0,622,21201,-3,1,-3,1106,0,640,109,-5,2106,0,0,109,7,1005,575,802,21001,576,0,-6,21002,577,1,-5,1105,1,814,21101,0,0,-1,21102,1,0,-5,21101,0,0,-6,20208,-6,576,-2,208,-5,577,570,22002,570,-2,-2,21202,-5,35,-3,22201,-6,-3,-3,22101,1489,-3,-3,1201,-3,0,843,1005,0,863,21202,-2,42,-4,22101,46,-4,-4,1206,-2,924,21102,1,1,-1,1106,0,924,1205,-2,873,21102,35,1,-4,1105,1,924,1201,-3,0,878,1008,0,1,570,1006,570,916,1001,374,1,374,2101,0,-3,895,1101,2,0,0,1202,-3,1,902,1001,438,0,438,2202,-6,-5,570,1,570,374,570,1,570,438,438,1001,578,558,922,20101,0,0,-4,1006,575,959,204,-4,22101,1,-6,-6,1208,-6,35,570,1006,570,814,104,10,22101,1,-5,-5,1208,-5,51,570,1006,570,810,104,10,1206,-1,974,99,1206,-1,974,1102,1,1,575,21102,1,973,0,1106,0,786,99,109,-7,2105,1,0,109,6,21102,1,0,-4,21102,1,0,-3,203,-2,22101,1,-3,-3,21208,-2,82,-1,1205,-1,1030,21208,-2,76,-1,1205,-1,1037,21207,-2,48,-1,1205,-1,1124,22107,57,-2,-1,1205,-1,1124,21201,-2,-48,-2,1106,0,1041,21101,-4,0,-2,1106,0,1041,21102,1,-5,-2,21201,-4,1,-4,21207,-4,11,-1,1206,-1,1138,2201,-5,-4,1059,1202,-2,1,0,203,-2,22101,1,-3,-3,21207,-2,48,-1,1205,-1,1107,22107,57,-2,-1,1205,-1,1107,21201,-2,-48,-2,2201,-5,-4,1090,20102,10,0,-1,22201,-2,-1,-2,2201,-5,-4,1103,2102,1,-2,0,1105,1,1060,21208,-2,10,-1,1205,-1,1162,21208,-2,44,-1,1206,-1,1131,1105,1,989,21101,439,0,1,1105,1,1150,21101,0,477,1,1105,1,1150,21101,514,0,1,21102,1149,1,0,1105,1,579,99,21101,1157,0,0,1105,1,579,204,-2,104,10,99,21207,-3,22,-1,1206,-1,1138,2102,1,-5,1176,2101,0,-4,0,109,-6,2105,1,0,16,11,24,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,28,7,28,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,11,34,1,34,1,34,1,28,13,22,1,5,1,5,1,16,13,5,1,16,1,5,1,11,1,16,1,5,1,11,1,16,1,5,1,11,1,8,13,1,11,1,1,8,1,7,1,3,1,11,1,1,1,8,1,5,13,5,1,1,1,8,1,5,1,1,1,3,1,5,1,5,1,1,1,8,1,5,1,1,1,3,1,5,1,5,1,1,1,1,8,5,1,1,1,3,1,5,1,5,1,1,1,1,1,6,1,5,1,1,1,3,1,1,13,1,1,6,1,5,1,1,1,3,1,1,1,3,1,5,1,3,1,6,1,5,1,1,13,3,1,1,7,2,1,5,1,5,1,1,1,3,1,1,1,3,1,1,1,1,1,3,1,2,1,5,1,5,1,1,1,3,1,1,1,3,1,1,1,1,1,3,1,2,1,5,1,5,1,1,1,3,1,1,1,3,1,1,1,1,1,3,1,2,7,5,13,1,1,1,1,3,1,16,1,3,1,1,1,5,1,1,1,3,1,16,1,3,11,3,1,16,1,5,1,5,1,5,1,16,1,5,1,5,1,5,1,16,1,5,1,5,1,5,1,16,13,5,1,22,1,11,1,22,13,2]);
const map = createMap(data);
const moves = createListOfRobotMoves(map);

function createMap(rawData) {
  const allFrames = [];
  const inputImage = [];
  const robotDirections = {
    ['^'.charCodeAt(0)] : 'top',
    ['<'.charCodeAt(0)] : 'left',
    ['>'.charCodeAt(0)] : 'right',
    ['>'.charCodeAt(0)] : 'bot',
  };
  let i = 0;
  while (rawData.length > 0) {
    if (rawData.length === 1) {
      break;
    }
    if (robotDirections[rawData[i]] && robotPosition.x === null) {
      robotPosition.direction = robotDirections[rawData[i]];
      robotPosition.y = i;
      robotPosition.x = allFrames.length;
    }
    if (rawData[i] === 77 && inputImage.length === 0) {
      //slice first frame from full data;
      inputImage.push(...allFrames);
    }
    if (rawData[i] === 10) {
      allFrames.push(rawData.splice(0, i));
      rawData.shift();
      i = -1;
    }
    i += 1;
  }
  allFrames.forEach((row, rowIndex) => {
    row.forEach((cell, cellIndex) => {
      allFrames[rowIndex][cellIndex] = String.fromCharCode(cell) + ' ';
    });
  });
  console.log(inputImage.reduce((acc, row) => acc + row.join('') + '\n',''));
  console.log(`Result: ${rawData[0]}`);
  return inputImage;
}

function createListOfRobotMoves(map) {
  const rotations = {
    top: {
      '0,-1': ['L', 'left'],
      '0,1': ['R', 'right'],
    },
    bot: {
      '0,-1': ['R', 'left'],
      '0,1': ['L', 'right'],
    },
    right: {
      '1,0': ['R', 'bot'],
      '-1,0': ['L', 'top'],
    },
    left: {
      '1,0': ['L', 'bot'],
      '-1,0': ['R', 'top'],
    },
  };
  const robotMoves = [];
  while (findRoad(map, [robotPosition.x, robotPosition.y], robotPosition.direction)) {
    const road = findRoad(map, [robotPosition.x, robotPosition.y], robotPosition.direction);
    robotMoves.push(rotations[robotPosition.direction][road.join()][0]);
    robotPosition.direction = rotations[robotPosition.direction][road.join()][1];
    let counter = 0;
    while (true) {
      if (!(map[robotPosition.x + road[0]]) ||
        map[robotPosition.x + road[0]][robotPosition.y + road[1]] !== '# ') {
        break;
      }
      robotPosition.x += road[0];
      robotPosition.y += road[1];
      counter += 1;
    }
    robotMoves.push(counter);
  }
  return robotMoves;
}

function findRoad(map, coords, dir) {
  let moves = [[0, 1], [0, -1]];
  if (dir === 'left' || dir === 'right') {
    moves = [[1, 0], [-1, 0]];
  }
  let road = null;
  moves.forEach((move) => {
    if (map[coords[0] + move[0]]) {
      if (map[coords[0] + move[0]][coords[1] + move[1]] === '# ') {
        road = [move[0], move[1]];
      }
    }
  });
  return road;
}


function createASCII(string) {
  const output = [];
  for (let i = 0; i < string.length; i += 1) {
    output.push(string.charCodeAt(i));
  }
  output.push(10);
  return output;
}

function createInput(createFrames) {
  const routine = 'A,A,B,B,C,B,C,B,C,A';
  const a = 'L,10,L,10,R,6';
  const b = 'R,12,L,12,L,12';
  const c = 'L,6,L,10,R,12,R,12';
  const answer = createFrames ? 'y' : 'n';
  const output = [...createASCII(routine), ...createASCII(a),
    ...createASCII(b), ...createASCII(c), ...createASCII(answer)];
  return output;
}

/* 
[L10,L10,R6,
 L10,L10,R6,
 R12,L12,L12
 R12,L12,L12
 L6,L10,R12,R12
 R12,L12,L12
 L6,L10,R12,R12
 R12,L12,L12
 L6,L10,R12,R12
 L10,L10,R6,]

 A: L10,L10,R6
 B: R12,L12,L12
 C: L6,L10,R12,R12

 A A B B C B C B C A
                                           
. . . . . . . . . . . . . . . . L 9 8 7 6 5 4 3 2 1 L . . . . . . . . 
. . . . . . . . . . . . . . . . 1 . . . . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 2 . . . . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 3 . . . . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 4 . . . . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 5 . . . . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 6 . . . . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 7 . . . . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 8 . . . . . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . 9 . . . . . . . . . . . . . . . . . . 
. . . . . . . . . . L 5 4 3 2 1 R . . . . . . . . . . . . . . . . . . 
. . . . . . . . . . 1 . . . . . . . . . . . . . . . . . . . . . . . . 
. . . . . . . . . . 2 . . . . . . . . . . . . . . . . . . . . . . . . 
. . . . . . . . . . 3 . . . . . . . . . . . . . . . . . . . . . . . . 
. . . . . . . . . . 4 . . . . . . . . . . . . . . . . . . . . . . . . 
. . . . . . . . . . 5 . . . . . . . . . . . . . . . . . . . . . . . . 
. . . . . . . . . . 6 . . . . . . . . . . . . . . . . . . . . . . . . 
. . . . . . . . . . 7 . . . . . . . . . . . . . . . . . . . . . . . . 
. . . . . . . . . . 8 . . . . . . . . . . . . . . . . . . . . . . . . 
. . . . . . . . . . 9 . . . . . . . . . . . . . . . . . . . . . . . . 
. . . . . . . . . . L 1 2 3 4 5 6 7 8 9 R . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . . . . . 1 . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . . . . . 2 . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . . . . . . . 3 . . . . . . . . . . . . . . 
. . . . . . . . . . . . . . L 1 0 9 8 7 4 5 4 3 2 1 L . . . . . . . . 
. . . . . . . . . . . . . . 1 . . . . . 5 . . . . . 1 . . . . . . . . 
. . . . . . . . L 1 0 9 8 7 6 5 4 3 2 1 R . . . . . 0 . . . . . . . . 
. . . . . . . . 1 . . . . . 3 . . . . . . . . . . . 9 . . . . . . . . 
. . . . . . . . 2 . . . . . 4 . . . . . . . . . . . 8 . . . . . . . . 
. . . . . . . . 3 . . . . . 5 . . . . . . . . . . . 7 . . . . . . . . 
L 1 0 9 8 7 6 5 4 3 2 1 L . L 1 2 3 4 5 6 7 8 9 R . 6 . . . . . . . . 
1 . . . . . . . 5 . . . 1 . . . . . . . . . . . 1 . 5 . . . . . . . . 
2 . . . . . R 1 6 3 4 5 0 7 8 9 0 1 r . . . . . 2 . 4 . . . . . . . . 
3 . . . . . 9 . 7 . . . 9 . . . . . # . . . . . 3 . 3 . . . . . . . . 
4 . . . . . 8 . 8 . . . 8 . . . . . # . . . . . 4 . 2 . R 1 2 3 4 5 6 
5 . . . . . 7 . 9 . . . 7 . . . . . # . . . . . 5 . 1 . 9 . . . . . . 
6 . . . . . 6 . 0 . . . 6 . R 1 2 3 4 5 6 7 8 9 0 1 L . 8 . . . . . . 
7 . . . . . 5 . 1 . . . 5 . 1 . . . # . . . . . 7 . . . 7 . . . . . . 
8 . . . . . 4 . L 1 2 3 4 5 6 7 8 9 0 1 R . . . 8 . L 5 4 3 2 1 L . . 
9 . . . . . 3 . . . . . 3 . 9 . . . # . 1 . . . 9 . 1 . 5 . . . 1 . . 
0 . . . . . 2 . . . . . 2 . 8 . . . # . 2 . . . 0 . 2 . 4 . . . 0 . . 
1 . . . . . 1 . . . . . 1 . 7 . . . # . 3 . . . 1 . 3 . 3 . . . 9 . . 
L 1 2 3 4 5 L . . . . . R 1 6 9 8 7 6 5 4 3 2 1 R . 4 . 2 . . . 8 . . 
. . . . . . . . . . . . . . 5 . . . # . 5 . . . . . 5 . 1 . . . 7 . . 
. . . . . . . . . . . . . . 4 . . . L 1 6 3 4 5 6 7 8 9 L . . . 6 . . 
. . . . . . . . . . . . . . 3 . . . . . 7 . . . . . 7 . . . . . 5 . . 
. . . . . . . . . . . . . . 2 . . . . . 8 . . . . . 8 . . . . . 4 . . 
. . . . . . . . . . . . . . 1 . . . . . 9 . . . . . 9 . . . . . 3 . . 
. . . . . . . . . . . . . . R 1 9 8 7 6 0 5 4 3 2 1 R . . . . . 2 . . 
. . . . . . . . . . . . . . . . . . . . 1 . . . . . . . . . . . 1 . . 
. . . . . . . . . . . . . . . . . . . . L 1 2 3 4 5 6 7 8 9 0 1 L . . 


 */

